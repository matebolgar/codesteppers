<?xml version = "1.0"?>
<root>
  <meta>
    <type>codeSurfer</type>
  </meta>

  <body>
    <item>
      <label>Bevezető</label>
      
      <title>A megvalósításhoz ismerned kell az 'array rotate' nevű tömb műveletet</title>
      <showNumbers>1</showNumbers>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let elemek = ['a', 'b', 'c', 'd', 'e'];

arrayRotate(elemek, 1) // ['b', 'c', 'd', 'e', 'a']
]]>
      </content>
    </item>

    <item>
      <label>Az array rotate</label>
      <title>Az array rotate azt csinálja, hogy egy megadott számnyi értékkel elforgatja a tömb elemeit. Pl:</title>
      <showNumbers>1</showNumbers>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let elemek = ['a', 'b', 'c', 'd', 'e'];

const eggyelElforgatott = arrayRotate(elemek, 1);

console.log(eggyelElforgatott); // ['b', 'c', 'd', 'e', 'a']
]]>
      </content>
    </item>

    <item>
      <title>Az array rotate azt csinálja, hogy egy megadott számnyi értékkel elforgatja a tömb elemeit. Pl:</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let elemek = ['a', 'b', 'c', 'd', 'e'];

const eggyelElforgatott = arrayRotate(elemek, 1);

console.log(eggyelElforgatott); // ['b', 'c', 'd', 'e', 'a']

const kettovelElforgatott = arrayRotate(eggyelElforgatott, 1);

console.log(kettovelElforgatott); // ['c', 'd', 'e', 'a', 'b']

]]>
      </content>
    </item>

    <item>
      <title>A megadott szám lehet akár negatív is, így visszafelé fogja forgatni az elemeket. Pl:</title>
      <fileName>script.js</fileName>
      <focus>9:13</focus>
      <content>
        <![CDATA[
let elemek = ['a', 'b', 'c', 'd', 'e'];

const eggyelElforgatott = arrayRotate(elemek, 1);

console.log(eggyelElforgatott); // ['b', 'c', 'd', 'e', 'a']

const kettovelElforgatott = arrayRotate(eggyelElforgatott, 1);

console.log(kettovelElforgatott); // ['c', 'd', 'e', 'a', 'b']

console.log(arrayRotate(kettovelElforgatott, -1)); // ['b', 'c', 'd', 'e', 'a']

]]>
      </content>
    </item>

    <item>
      <title>Emellett a szám lehet egynél nagyobb is, így több elemnyi forgatás történik. Pl:</title>
      <fileName>script.js</fileName>
      <focus>9:13</focus>
      <content>
        <![CDATA[
let elemek = ['a', 'b', 'c', 'd', 'e'];

const eggyelElforgatott = arrayRotate(elemek, 1);

console.log(eggyelElforgatott); // ['b', 'c', 'd', 'e', 'a']

const kettovelElforgatott = arrayRotate(eggyelElforgatott, 1);

console.log(kettovelElforgatott); // ['c', 'd', 'e', 'a', 'b']

console.log(arrayRotate(kettovelElforgatott, -1)); // ['b', 'c', 'd', 'e', 'a']

console.log(arrayRotate(kettovelElforgatott, -2)); // ['a', 'b', 'c', 'd', 'e']

]]>
      </content>
    </item>

    <item>
      <title>Használata a képnézegető alkalmazásunkban:</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let elemek = ['a', 'b', 'c', 'd', 'e'];

const eggyelElforgatott = arrayRotate(elemek, 1);

console.log(eggyelElforgatott); // ['b', 'c', 'd', 'e', 'a']

const kettovelElforgatott = arrayRotate(eggyelElforgatott, 1);

console.log(kettovelElforgatott); // ['c', 'd', 'e', 'a', 'b']

console.log(arrayRotate(kettovelElforgatott, -1)); // ['b', 'c', 'd', 'e', 'a']

console.log(arrayRotate(kettovelElforgatott, -2)); // ['a', 'b', 'c', 'd', 'e']


/*
    Az array rotate-ot úgy fogjuk használni az alkalmazásunkban, hogy a 
    képek léptetésekor 3-mal, vagy mínusz 3-mal forgatunk az elemeken és az 
    elemek közül mindig fixen az első hármat rajzoljuk ki.
*/

// Kiinduló állapot                          ↓ kirajzolt ↓
let elemek2 = ['a', 'b', 'c', 'd', 'e']; // ['a', 'b', 'c', 'd', 'e']

// Előreléptetés                       ↓ kirajzolt ↓
elemek2 = arrayRotate(elemek2, 3); // ['d', 'e', 'a', 'b', 'c']

// Visszaléptetés                       ↓ kirajzolt ↓
elemek2 = arrayRotate(elemek2, -3); // ['c', 'd', 'e', 'a', 'b']

]]>
      </content>
    </item>

    <item>
      <title>Figyelem! Az array rotate function belső működését nem kell feltétlenül átlátnunk, csak használunk kell tudni.</title>
      <fileName>script.js</fileName>
      <focus>32:37</focus>
      <content>
        <![CDATA[
let elemek = ['a', 'b', 'c', 'd', 'e'];

const eggyelElforgatott = arrayRotate(elemek, 1);

console.log(eggyelElforgatott); // ['b', 'c', 'd', 'e', 'a']

const kettovelElforgatott = arrayRotate(eggyelElforgatott, 1);

console.log(kettovelElforgatott); // ['c', 'd', 'e', 'a', 'b']

console.log(arrayRotate(kettovelElforgatott, -1)); // ['b', 'c', 'd', 'e', 'a']

console.log(arrayRotate(kettovelElforgatott, -2)); // ['a', 'b', 'c', 'd', 'e']


/*
    Az array rotate-ot úgy fogjuk használni az alkalmazásunkban, hogy a 
    képek léptetésekor 3-mal, vagy mínusz 3-mal forgatunk az elemeken és az 
    elemek közül mindig fixen az első hármat rajzoljuk ki.
*/

// Kiinduló állapot                        ↓ kirajzolt ↓
let kepek = ['a', 'b', 'c', 'd', 'e']; // ['a', 'b', 'c', 'd', 'e']

// Előreléptetés                    ↓ kirajzolt ↓
kepek = arrayRotate(elemek, 3); // ['d', 'e', 'a', 'b', 'c']

// Visszaléptetés                    ↓ kirajzolt ↓
kepek = arrayRotate(elemek, -3); // ['c', 'd', 'e', 'a', 'b']


function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

]]>
      </content>
    </item>

    <item>
      <title>A kiinduló state-et ezúttal is megtalálod a script.js-ben, az arrayRotate function-nel együtt.</title>
      <fileName>script.js</fileName>
      <focus>32:45</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

]]>
      </content>
    </item>

    <item>
      <title>
        Kihívás 1.
      </title>
      <fileName>script.js</fileName>
      <label>Kihívás 1.</label>
      
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

/*
    1. Kihívás:
    Eleinte még ne foglalkozz az animációval, csak érd el azt, hogy az elemek
    gombnyomással hármasával léptethetőek legyenek.

    Ehhez gombnyomás eseményre reagálva írd felül a state-et, a megfelelő 
    irányba rotate-elt elemekkel. 
    A state változtatás követően pedig rajzold újra a felületet 
    egy render függvénnyel.

    A render function-ben, iterálj végig a tömb első 3 elemén és generálj ki 
    HTML tartalmat az index.html-ben megadott sablon alapján.

    A render function-t ne felejtsd el oldalletöltésre is meghívni, hogy az
    alapállapot kirajzolódjon.
*/

]]>
      </content>
    </item>

    <item>
      <title>
        A sablont az index.html-ben találod
      </title>
      <fileName>index.html</fileName>
      <focus>1:16</focus>
      <content>
        <![CDATA[
<!-- Az alábbi tartalmat használd sablonként a HTML generálás során -->
<div class="d-flex" style="min-height: 260px">
  <div class="m-auto">
      <button id="prevButton" class="btn btn-primary">&lt;</button>
  </div>

  <div class="w-100 m-auto">
      <div id="elemek-kontener" class="card-group w-100">
        <!-- Kártyák kirajzolása dinamikusan, a state alapján -->
          <div class="card px-2 col-sm-6">
              <img src="./images/delivery.jpeg" class="card-img-top" />
              <div class="card-body p-0">
              <h5 class="card-title"><b>#4</b></h5>
              <p class="card-text fs-6">Delivery Guy</p>
              </div>
          </div>

          <div class="card px-2 col-sm-6">
              <img src="./images/ux.jpeg" class="card-img-top" />
              <div class="card-body p-0">
              <h5 class="card-title"><b>#5</b></h5>
              <p class="card-text fs-6">UX Designer</p>
              </div>
          </div>

          <div class="card px-2 col-sm-6">
              <img src="./images/businessman.jpeg" class="card-img-top" />
              <div class="card-body p-0">
              <h5 class="card-title"><b>#6</b></h5>
              <p class="card-text fs-6">Businessman</p>
              </div>
          </div>
        <!-- Eddig -->
      </div>
  </div>

  <div class="m-auto">
      <button id="nextButton" class="btn btn-primary">&gt;</button>
  </div>
</div>
]]>
      </content>
    </item>

    <item>
      <title>Sok sikert!</title>
    </item>

    <item>
      <title>
        Először is jelenítsük meg a felhasználói felületet, a kiinduló állapotban.
      </title>
      <fileName>script.js</fileName>
      <label>Megoldás 1.</label>
      <focus>57:58</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

/*
    1. Kihívás:
    Eleinte még ne foglalkozz az animációval, csak érd el azt, hogy az elemek
    gombnyomással hármasával léptethetőek legyenek.

    Ehhez gombnyomás eseményre reagálva írd felül a state-et, a megfelelő 
    irányba rotate-elt elemekkel. 
    A state változtatás követően pedig rajzold újra a felületet 
    egy render függvénnyel.

    A render function-ben, iterálj végig a tömb első 3 elemén és generálj ki 
    HTML tartalmat az index.html-ben megadott sablon alapján.

    A render function-t ne felejtsd el oldalletöltésre is meghívni, hogy az
    alapállapot kirajzolódjon.
*/

]]>
      </content>
    </item>

    <item>
      <title>
        Először is jelenítsük meg a felhasználói felületet, a kiinduló állapotban.
      </title>
      <!-- Kössünk be funkcionalitást, gombnyomás eseményre. -->
      <fileName>script.js</fileName>
      <focus>58:67</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

/*
    1. Kihívás:
    Eleinte még ne foglalkozz az animációval, csak érd el azt, hogy az elemek
    gombnyomással hármasával léptethetőek legyenek.

    Ehhez gombnyomás eseményre reagálva írd felül a state-et, a megfelelő 
    irányba rotate-elt elemekkel. 
    A state változtatás követően pedig rajzold újra a felületet 
    egy render függvénnyel.
*/

/*
    A render function-ben, iterálj végig a tömb első 3 elemén és generálj ki 
    HTML tartalmat az index.html-ben megadott sablon alapján.
*/

render();
  
function render() {
  
}

]]>
      </content>
    </item>

    <item>
      <title>
        Ehhez felhasználhatjuk a index.html-ben lévő sablont
      </title>
      <fileName>script.js</fileName>
      <focus>65:84</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

/*
    1. Kihívás:
    Eleinte még ne foglalkozz az animációval, csak érd el azt, hogy az elemek
    gombnyomással hármasával léptethetőek legyenek.

    Ehhez gombnyomás eseményre reagálva írd felül a state-et, a megfelelő 
    irányba rotate-elt elemekkel. 
    A state változtatás követően pedig rajzold újra a felületet 
    egy render függvénnyel.
*/

/*
    A render function-ben, iterálj végig a tömb első 3 elemén és generálj ki 
    HTML tartalmat az index.html-ben megadott sablon alapján.
*/

render();
  
function render() {
  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
              Ide jönnek a képek...
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;
}

]]>
      </content>
    </item>

    <item>
      <title>
        Így megjelenik a felület azon része, amelyik a képek léptetésekor is ugyanolyan marad. (Pl a gombok).
      </title>
      <fileName>script.js</fileName>
      <focus>65:84</focus>

    </item>

    <item>
      <title>
        Ide pedig be kell ollóznunk a state alapján dinamikusan előállított kép listát.
      </title>
      <fileName>script.js</fileName>
      <focus>74</focus>
    </item>

    <item>
      <title>
        Ehhez inicializálhatunk egy változót, üres string értékkel. Utána ezt beírhatjuk oda, ahol a dinamikus tartalom lesz.
      </title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

/*
    1. Kihívás:
    Eleinte még ne foglalkozz az animációval, csak érd el azt, hogy az elemek
    gombnyomással hármasával léptethetőek legyenek.

    Ehhez gombnyomás eseményre reagálva írd felül a state-et, a megfelelő 
    irányba rotate-elt elemekkel. 
    A state változtatás követően pedig rajzold újra a felületet 
    egy render függvénnyel.
*/

/*
    A render function-ben, iterálj végig a tömb első 3 elemén és generálj ki 
    HTML tartalmat az index.html-ben megadott sablon alapján.
*/

render();
  
function render() {
  let elemekHTML = "";

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;
}

]]>
      </content>
    </item>

    <item>
      <title>
        Majd ezt követően kiszedhetjük a state első három elemét és átiterálhatunk rajta.
      </title>
      <fileName>script.js</fileName>
      <focus>66,68:70,80</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

/*
    1. Kihívás:
    Eleinte még ne foglalkozz az animációval, csak érd el azt, hogy az elemek
    gombnyomással hármasával léptethetőek legyenek.

    Ehhez gombnyomás eseményre reagálva írd felül a state-et, a megfelelő 
    irányba rotate-elt elemekkel. 
    A state változtatás követően pedig rajzold újra a felületet 
    egy render függvénnyel.
*/

/*
    A render function-ben, iterálj végig a tömb első 3 elemén és generálj ki 
    HTML tartalmat az index.html-ben megadott sablon alapján.
*/

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
      
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;
}

]]>
      </content>
    </item>

    <item>
      <title>
        Az iterációban minden soron következő elem kapcsán összeállíthatunk egy sablon darabkát és hozzáírhatjuk az elemekHTML gyűjtő értékhez.
      </title>
      <fileName>script.js</fileName>
      <focus>64,66,68:78,88,91</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

/*
    1. Kihívás:
    Eleinte még ne foglalkozz az animációval, csak érd el azt, hogy az elemek
    gombnyomással hármasával léptethetőek legyenek.

    Ehhez gombnyomás eseményre reagálva írd felül a state-et, a megfelelő 
    irányba rotate-elt elemekkel. 
    A state változtatás követően pedig rajzold újra a felületet 
    egy render függvénnyel.
*/

/*
    A render function-ben, iterálj végig a tömb első 3 elemén és generálj ki 
    HTML tartalmat az index.html-ben megadott sablon alapján.
*/

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
    elemekHTML += `
        <div class="card px-2 col-sm-6">
          <img src="${elem.imageURL}" class="card-img-top">
          <div class="card-body p-0">
            <h5 class="card-title"><b>#${elem.id}</b></h5>
            <p class="card-text fs-6">${elem.title}</p>
          </div>
        </div>
    `;
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;
}

]]>
      </content>
    </item>

    <item>
      <title>
        Ezzel elértük, hogy kirajzolódjon az alap állapot.
      </title>
      <fileName>script.js</fileName>
      <focus>63:99</focus>
    </item>

    <item>
      <title>
        Ezek után kössünk be funkcionalitást, gombnyomás eseményre.
      </title>
      <fileName>script.js</fileName>
      <focus>63,67,77,83,84,86</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
    elemekHTML += `
        <div class="card px-2 col-sm-6">
          <img src="${elem.imageURL}" class="card-img-top">
          <div class="card-body p-0">
            <h5 class="card-title"><b>#${elem.id}</b></h5>
            <p class="card-text fs-6">${elem.title}</p>
          </div>
        </div>
    `;
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;

    document.getElementById("prevButton").onclick = goToPreviousItems;
    document.getElementById("nextButton").onclick = goToNextItems;
}

]]>
      </content>
    </item>

    <item>
      <title>
        Ezek után kössünk be funkcionalitást, gombnyomás eseményre.
      </title>
      <fileName>script.js</fileName>
      <focus>83,84,86:96</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
    elemekHTML += `
        <div class="card px-2 col-sm-6">
          <img src="${elem.imageURL}" class="card-img-top">
          <div class="card-body p-0">
            <h5 class="card-title"><b>#${elem.id}</b></h5>
            <p class="card-text fs-6">${elem.title}</p>
          </div>
        </div>
    `;
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;

    document.getElementById("prevButton").onclick = goToPreviousItems;
    document.getElementById("nextButton").onclick = goToNextItems;
}

function goToPreviousItems() {
  elemek = arrayRotate(elemek, -3);     // State változtatás
  render();                             // Renderelés
}

function goToNextItems() {
  elemek = arrayRotate(elemek, 3); 
  render();
}

]]>
      </content>
    </item>

    <item>
      <title>
        Így a képek már léptethetőek.
      </title>
      <focus>83,84,86:96</focus>
    </item>

    <item>
      <label>A slide animáció</label>
      
      <title>
        Most valósítsuk meg az animációt!
      </title>
      <focus>87:96</focus>
    </item>

    <item>

      <title>
        Az animációhoz ezeket a css class-okat kell ráraknod az "elemek-kontener" id-jú elementre, a megfelelő pillanatban.
      </title>
      <fileName>style.css</fileName>
      <focus>1:17</focus>
      <content>
        <![CDATA[
/* Bal nyílra való kattintáskor azonnal: */
.to-right {
  position: relative;
  right: 0%;
  transform: translateX(100%); /* Kiúsztatás jobbra */
  -webkit-transform: translateX(100%);
  transition: transform 0.3s ease-in-out;
}

/* Ha végetért az átmenet, akkor: */
.from-left {
  position: relative;
  left: -100%;
  transform: translateX(100%); /* Beúsztatás balról */
  -webkit-transform: translateX(100%);
  transition: transform 0.3s ease-in-out;
}

/* Jobb nyílra való kattintáskor azonnal: */
.to-left {
  position: relative;
  left: 0%;
  transform: translateX(-100%); /* Kiúsztatás balra */
  -webkit-transform: translateX(-100%);
  transition: transform 0.3s ease-in-out;
}

/* Ha végetért az átmenet, akkor: */
.from-right {
  position: relative;
  left: 100%;
  transform: translateX(-100%); /* Beúsztatás jobbról */
  -webkit-transform: translateX(-100%);
  transition: transform 0.3s ease-in-out;
}

]]>
      </content>
    </item>

    <item>
      <focus>19:36</focus>
    </item>

    <item>
      <title>
        Felmerülhet a kérdés, hogy hogyan lehet reagálni JS-ben arra, amikor egy CSS transition végetér egy element kapcsán?
      </title>
      <fileName>script.js</fileName>
      <focus>86:91</focus>
      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
    elemekHTML += `
        <div class="card px-2 col-sm-6">
          <img src="${elem.imageURL}" class="card-img-top">
          <div class="card-body p-0">
            <h5 class="card-title"><b>#${elem.id}</b></h5>
            <p class="card-text fs-6">${elem.title}</p>
          </div>
        </div>
    `;
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;

    document.getElementById("prevButton").onclick = goToPreviousItems;
    document.getElementById("nextButton").onclick = goToNextItems;
}

function goToPreviousItems() {
    elemek = arrayRotate(elemek, -3);
    render();
}

function goToNextItems() {
  elemek = arrayRotate(elemek, 3); 
  render();
}

]]>
      </content>
    </item>

    <item>
      <title>Ha végetért egy átmenet, arra úgy tudsz reagálni, hogy az element ontransitionend kulcs alá bekötsz egy függvényt.</title>

      <focus>87,91,110,112</focus>
      <focus>86:97</focus>
      <fileName>script.js</fileName>

      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
    elemekHTML += `
        <div class="card px-2 col-sm-6">
          <img src="${elem.imageURL}" class="card-img-top">
          <div class="card-body p-0">
            <h5 class="card-title"><b>#${elem.id}</b></h5>
            <p class="card-text fs-6">${elem.title}</p>
          </div>
        </div>
    `;
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;

    document.getElementById("prevButton").onclick = goToPreviousItems;
    document.getElementById("nextButton").onclick = goToNextItems;
}

function goToPreviousItems() {
  const container = document.getElementById("elemek-kontener");

  container.ontransitionend = () => {

    elemek = arrayRotate(elemek, -3);
    render();

  };
}

function goToNextItems() {
  elemek = arrayRotate(elemek, 3); 
  render();
}

]]>
      </content>
    </item>

    <item>
      <title>
        Így a megvalósítás sorrendje a következő:
      </title>
      <focus>86:112</focus>
      <fileName>script.js</fileName>

      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
    elemekHTML += `
        <div class="card px-2 col-sm-6">
          <img src="${elem.imageURL}" class="card-img-top">
          <div class="card-body p-0">
            <h5 class="card-title"><b>#${elem.id}</b></h5>
            <p class="card-text fs-6">${elem.title}</p>
          </div>
        </div>
    `;
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;

    document.getElementById("prevButton").onclick = goToPreviousItems;
    document.getElementById("nextButton").onclick = goToNextItems;
}

function goToPreviousItems() {
  const container = document.getElementById("elemek-kontener");
  // 1. Rakjuk rá a container-re a "to-right" class-t

  container.ontransitionend = () => {
    // 2. Amikor végetért az átmenet, rotate-eljünk és rendereljünk
    elemek = arrayRotate(elemek, -3);
    render();
    // 3. Selecteljük ki újra az "elemek-kontener" id-jú elementet
    
    // 4. Kényszerítsük a böngészőt reflow-ra
    container.offsetHeight;
    // 5. Rakjuk rá az "elemek-kontener"-re a "from-left" class-t

    container.ontransitionend = () => {
      // 6. Amikor végetért az átmenet, távolítsuk el a "from-left" class-t

    };
  };
}

function goToNextItems() {
  elemek = arrayRotate(elemek, 3); 
  render();
}

]]>
      </content>
    </item>

    <item>
      <title>Itt azért kell újra kiselectelni a konténert, mert a régit elveszítjük a renderelés miatt.</title>
      <focus>86,88,95,107</focus>
    </item>

    <item>
      <title>A böngészőt ezen a ponton reflow-ra kell kényszerítenünk, ahhoz hogy a transition effekt rendben végbemehessen.</title>
      <focus>86,97,98,107</focus>
    </item>

    <item>
      <title>Javaslom hogy a 2-es és a 4-es kivételével, próbáld meg megvalósítani a lépéseket. Sok sikert!</title>
      <focus>86,89,95,99,102,110</focus>
    </item>

    <item>
      <title>
        A megoldás így fest:
      </title>
      <label>Megoldás 2.</label>
      <focus>86:107</focus>
      <fileName>script.js</fileName>

      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
    elemekHTML += `
        <div class="card px-2 col-sm-6">
          <img src="${elem.imageURL}" class="card-img-top">
          <div class="card-body p-0">
            <h5 class="card-title"><b>#${elem.id}</b></h5>
            <p class="card-text fs-6">${elem.title}</p>
          </div>
        </div>
    `;
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;

    document.getElementById("prevButton").onclick = goToPreviousItems;
    document.getElementById("nextButton").onclick = goToNextItems;
}
 
function goToPreviousItems() {
  const container = document.getElementById("elemek-kontener");
  // 1. Rakjuk rá a container-re a "to-right" class-t
  container.classList.add("to-right");
  container.ontransitionend = () => {
    // 2. Amikor végetért az átmenet, rotate-eljünk és rendereljünk
    elemek = arrayRotate(elemek, -3);
    render();
    // 3. Selecteljük ki újra az "elemek-kontener" id-jú elementet
    const container = document.getElementById("elemek-kontener");
    // 4. Kényszerítsük a böngészőt reflow-ra
    container.offsetHeight;
    // 5. Rakjuk rá az "elemek-kontener"-re a "from-left" class-t
    container.classList.add("from-left");
    container.ontransitionend = () => {
      // 6. Amikor végetért az átmenet, távolítsuk el a "from-left" class-t
      container.classList.remove("from-left");
    };
  };
}

function goToNextItems() {
  elemek = arrayRotate(elemek, 3); 
  render();
}

]]>
      </content>
    </item>

    <item>
      <title>
        Ennek analógiájára a másik gombnál is megcsinálhatjuk ugyanezt.
      </title>
      <focus>107:122</focus>
      <fileName>script.js</fileName>

      <content>
        <![CDATA[
// State
let elemek = [
  {
    id: 1,
    imageURL: "./images/accountant.jpeg",
    title: "Accountant",
  },
  {
    id: 2,
    imageURL: "./images/photographer.jpeg",
    title: "Photographer",
  },
  {
    id: 3,
    imageURL: "./images/football.jpeg",
    title: "Football player",
  },
  {
    id: 4,
    imageURL: "./images/delivery.jpeg",
    title: "Delivery Guy",
  },
  {
    id: 5,
    imageURL: "./images/ux.jpeg",
    title: "UX Designer",
  },
  {
    id: 6,
    imageURL: "./images/businessman.jpeg",
    title: "Businessman",
  },
  {
    id: 7,
    imageURL: "./images/boss.jpeg",
    title: "Boss",
  },
];

function arrayRotate(arr, count) {
  const ret = arr.slice();
  count -= ret.length * Math.floor(count / ret.length);
  ret.push.apply(ret, ret.splice(0, count));
  return ret;
}

render();
  
function render() {
  let elemekHTML = "";

  for (let elem of elemek.slice(0, 3)) {
    elemekHTML += `
        <div class="card px-2 col-sm-6">
          <img src="${elem.imageURL}" class="card-img-top">
          <div class="card-body p-0">
            <h5 class="card-title"><b>#${elem.id}</b></h5>
            <p class="card-text fs-6">${elem.title}</p>
          </div>
        </div>
    `;
  }

  document.getElementById("gallery-app").innerHTML = `
      <div class="d-flex" style="min-height: 260px">
        <div class="m-auto">
          <button id="prevButton" class="btn btn-primary"><</button>
        </div>

        <div class="w-100 m-auto">      
          <div id="elemek-kontener" class="card-group w-100">
            ${elemekHTML}
          </div>
        </div>

        <div class="m-auto">
          <button id="nextButton" class="btn btn-primary">></button>
        </div>

      </div>
  `;

    document.getElementById("prevButton").onclick = goToPreviousItems;
    document.getElementById("nextButton").onclick = goToNextItems;
}
 
function goToPreviousItems() {
  const container = document.getElementById("elemek-kontener");
  // 1. Rakjuk rá a container-re a "to-right" class-t
  container.classList.add("to-right");
  container.ontransitionend = () => {
    // 2. Amikor végetért az átmenet, rotate-eljünk és rendereljünk
    elemek = arrayRotate(elemek, -3);
    render();
    // 3. Selecteljük ki újra az "elemek-kontener" id-jú elementet
    const container = document.getElementById("elemek-kontener");
    // 4. Kényszerítsük a böngészőt reflow-ra
    container.offsetHeight;
    // 5. Rakjuk rá az "elemek-kontener"-re a "from-left" class-t
    container.classList.add("from-left");
    container.ontransitionend = () => {
      // 6. Amikor végetért az átmenet, távolítsuk el a "from-left" class-t
      container.classList.remove("from-left");
    };
  };
}

function goToNextItems() {
  const container = document.getElementById("elemek-kontener");
  container.classList.add("to-left");
  container.ontransitionend = () => {
    elemek = arrayRotate(elemek, 3);
    render();
    const container = document.getElementById("elemek-kontener");
    container.offsetHeight;
    container.classList.add("from-right");
    container.ontransitionend = () => {
      container.classList.remove("from-right");
    };
  };
}

]]>
      </content>
    </item>

    <item>
      <label>Kész</label>
      
      <title>Ezzel elkészültünk!</title>
      <focus>107:124</focus>
    </item>

  </body>
</root>
