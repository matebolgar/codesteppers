<?xml version = "1.0"?>
<root>
  <meta>
    <type>codeSurfer</type>
  </meta>

  <body>
    <item>
      <label>Bevezető</label>
      
      <title>Egy lehetséges megvalósítás lépései a következők:</title>
      <showNumbers>1</showNumbers>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján

// 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
//    left és a top attribútuma pedig a state-ből származó x és y érték

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Az állapotot mindig úgy érdemes létrehozni, hogy a legminimálisabb módon írja le a működéshez szükséges információkat. Jelen esetben ez a három kulcs-érték pár elegendő.</title>
      <focus>1:5,25</focus>
      <fileName>script.js</fileName>
    </item>

    <item>
      <title>Az első lépés a renderelő függvény létrehozása</title>
      <label>Megvalósítás</label>
      <focus>1:10,25</focus>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {

}

// 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
//    left és a top attribútuma pedig a state-ből származó x és y érték

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Ezt a függvényt már oldalletöltéskor le kell futtatnunk, hogy a doboz kirajzolódjon a kiinduló helyzetében.</title>
      <focus>7:12</focus>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {

}

// 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
//    left és a top attribútuma pedig a state-ből származó x és y érték

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Kezdhetjük azzal, hogy létrehozzuk a dobozt, teljesen statikus formában.</title>
      <focus>7:20</focus>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  const doboz = `
    <div class="box" style="width: 200px; position: absolute;">
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
//    left és a top attribútuma pedig a state-ből származó x és y érték

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Utána kicserélhetjük a statikus tartalom megfelelő részeit, a state-ből származó dinamikus adattal.</title>
      <focus>7:22</focus>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div class="box" style="width: 200px; position: absolute;">
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Így létrehozhatunk dinamikusan pozíció adatokat</title>
      <fileName>script.js</fileName>
      <focus>2,3,15</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Valamint létrehozhatunk dinamikus class attribútumot is.</title>
      <focus>4,16</focus>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>A .grabbed és .not-grabbed class attribútumokra meg van határozva a megfelelő szabály a style.css-ben</title>
      <focus>1:13</focus>
      <fileName>style.css</fileName>
      <content>
        <![CDATA[
.not-grabbed {
    cursor: move; /* fallback if grab cursor is unsupported */
    cursor: grab;
    cursor: -moz-grab;
    cursor: -webkit-grab;
}

 /* (Optional) Apply a "closed-hand" cursor during drag operation. */
.grabbed {
    cursor: grabbing;
    cursor: -moz-grabbing;
    cursor: -webkit-grabbing;
}

.box {
    background-color: blueviolet;
    border: 2px dashed black;
    border-radius: 6px;
}
]]>
      </content>
    </item>

    <item>
      <title>A .grabbed és .not-grabbed class attribútumokra meg van határozva a megfelelő szabály a style.css-ben</title>
      <focus>4,16</focus>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>A következő lépés, hogy reagálunk a doboz kapcsán a mousedown és a mouseup eseményre</title>
      <label>Mousedown és mouseup eseménykezelők</label>
      
      <focus>27,29</focus>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Ezeket inline JS-jént is be lehet kötni. A másik lehetőség, hogy közvetlenül az innerHTML módosítás után kiselecteled a dobozt és úgy kötöd rá az event handler-eket.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Ezeket inline JS-jént is be lehet kötni. A másik lehetőség, hogy közvetlenül az innerHTML módosítás után kiselecteled a dobozt és úgy kötöd rá az event handler-eket.</title>
      <fileName>script.js</fileName>
      <focus>17:18,29:37</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>A következő lépés az, hogy eseménykezelőt kötünk be a mousemove esemény kapcsán is.</title>
      <fileName>script.js</fileName>
      <label>Reagálás mousemove eseményre</label>
      <focus>13:24</focus>
    </item>

    <item>
      <title>Ezt ugyancsak megvalósíthatjuk inline JS-sel, viszont ezúttal az event object-et is be kell passzolnunk, mert a handler function-ben szükség lesz rá.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>A handler function-ben számíthatunk rá, hogy érkezni fog az event object.</title>
      <fileName>script.js</fileName>
      <focus>19,40:45</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
 
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Itt csak akkor akarunk bármi kódot futtatni, ha a felhasználó éppen húzza a dobozkát és ezért az isDragged true értékre van állítódva.</title>
      <fileName>script.js</fileName>
      <focus>40:46</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
  if (state.isDragged) {

  }
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Ezután elvégezhetjük a state módosítást, az event object-ből kinyert egér pozíció adataival.</title>
      <fileName>script.js</fileName>
      <focus>40:47</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
  if (state.isDragged) {
    state.x = event.clientX;
    state.y = event.clientY;
  }
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Ezután újra kell rajzolnunk a dobozt, minden state változás alkalmával.</title>
      <focus>49</focus>
    </item>

    <item>
      <title>Ezután újra kell rajzolnunk a dobozt, minden state változás alkalmával.</title>
      <fileName>script.js</fileName>
      <focus>29,33,39,48,52</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
  render();
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
  render();
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
  if (state.isDragged) {
    state.x = event.clientX;
    state.y = event.clientY;
    render();
  }
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Ha most futtatod az alkalmazást, azt tapasztalhatod, hogy a doboz bal felső sarka mindig az egérhez ugrik és emiatt nehézkes elhúzni.</title>
      <focus>29,33,39,48,52</focus>
    </item>

    <item>
      <title>A probléma itt a state változtatásnál van; ha az egér pozícióját állítjuk be, akkor a doboz is pont innen fog indulni.</title>
      <focus>46,47</focus>
    </item>

    <item>
      <label>Eltolás megadása</label>
      
      <title>A megoldás az, hogy mielőtt az event.clientX és event.clientY értéket beírnánk az állapotba, az x értéket el kell tolnunk a doboz szélességének felével, az y értéket pedig a doboz magasságának felével. Így az egérnél pont a doboz közepe lesz.</title>
      <focus>46,47</focus>
    </item>
    <item>
      <title>Ehhez meg kell tudnunk a doboz element dimenzióit.</title>
      <focus>46,47</focus>
    </item>

    <item>
      <title>A doboz elementhez, az event target-en keresztül juthatunk hozzá.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
  render();
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
  render();
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
  if (state.isDragged) {
    const box = event.target.closest(".box");
    if (!box) {
      return;
    }
    state.x = event.clientX;
    state.y = event.clientY;
    render();
  }
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>A "closest" függvény azt csinálja, hogy elkezd felfelé lépdelni az element hierarchiában és közben azt az elementet keresi, ami egyezik a bepasszolt selector értékével. Jelen esetben addig lépdel, amíg bele nem ütközik a box classú elementbe és ezt az elementet adja vissza találatként.</title>
      <focus>46</focus>
    </item>

    <item>
      <title>A szélességet és a magasságot a box.offsetWidth és a box.offsetHeight kulcsok alól tudjuk kinyerni. Így már könnyen elvégezhetjük a számítást.</title>
      <fileName>script.js</fileName>
      <focus>46,50,51</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
  render();
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
  render();
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
  if (state.isDragged) {
    const box = event.target.closest(".box");
    if (!box) {
      return;
    }
    state.x = event.clientX - box.offsetWidth / 2;
    state.y = event.clientY - box.offsetHeight / 2;
    render();
  }
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>A szélességet és a magasságot a box.offsetWidth és a box.offsetHeight kulcsok alól tudjuk kinyerni. Így már könnyen elvégezhetjük a számítást.</title>
      <fileName>script.js</fileName>
      <focus>46,50,51</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
  render();
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
  render();
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
  if (state.isDragged) {
    const box = event.target.closest(".box");
    if (!box) {
      return;
    }
    state.x = event.clientX - box.offsetWidth / 2;
    state.y = event.clientY - box.offsetHeight / 2;
    render();
  }
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Ezek mellett azt is hozzászámolhatjuk, hogy az oldal mennyire van legörgetve. Így az érték pontos marad, görgetés esetén is.</title>
      <fileName>script.js</fileName>
      <focus>46,50,51</focus>
      <content>
        <![CDATA[
let state = {
  x: 150,
  y: 300,
  isDragged: false,
};

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
  render();
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
  render();
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
  if (state.isDragged) {
    const box = event.target.closest(".box");
    if (!box) {
      return;
    }
    state.x = document.documentElement.scrollLeft + event.clientX - box.offsetWidth / 2;
    state.y = document.documentElement.scrollTop + event.clientY - box.offsetHeight / 2;
    render();
  }
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Egy utolsó finomítás az lehetne, hogy a kiinduló állapotot is dinamikusan állítjuk elő. Így az első kirajzolás nem egy fix helyen történik, hanem az appunk konténer elementjének kezdeténél.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
let state = {
  x: undefined,
  y: undefined,
  isDragged: false,
};

const container = document.getElementById("drag-and-drop-app");
state.x = container.offsetLeft;
state.y = container.offsetTop;

window.onload = render;

// 1. Készíts renderelő függvényt, ami megjeleníti a dobozt a state-ből kiolvasott adatok alapján
function render() {
  // 2. A dobozt úgy rajzold ki, hogy az element-nek a position style attribútuma "absolute", a 
  //    left és a top attribútuma pedig a state-ből származó x és y érték
  const doboz = `
    <div
      style="width: 200px; position: absolute; left: ${state.x}px; top: ${state.y}px;"
      class="box ${state.isDragged ? "grabbed" : "not-grabbed"}"
      onmousedown="dobozDragStart()"
      onmouseup="dobozDragEnd()"
      onmousemove="dobozMouseMove(window.event)"
    >
      <div class="card-body">
        <h5 class="card-title display-4"># húzd arrébb</h5>
      </div>
    </div>
  `;

  document.getElementById("drag-and-drop-app").innerHTML = doboz;
}

// 3. A doboz mousedown eseményre reagálva módosítsd a state isDragged értékét true-ra
function dobozDragStart() {
  state.isDragged = true;
  render();
}

// 4. A doboz mouseup eseményre reagálva módosítsd a state isDragged értékét false-ra
function dobozDragEnd() {
  state.isDragged = false;
  render();
}

/* 5. A doboz mousemove eseménykor vizsgáld meg, hogy a state.isDragged értéke true-e
Amennyiben igen, írd be a state x és y kulcsa alá az egér aktuális x,y pozícióját */
function dobozMouseMove(event) {
  if (state.isDragged) {
    const box = event.target.closest(".box");
    if (!box) {
      return;
    }
    state.x = document.documentElement.scrollLeft + event.clientX - box.offsetWidth / 2;
    state.y = document.documentElement.scrollTop + event.clientY - box.offsetHeight / 2;
    render();
  }
}

// 7. Az állapotváltozások után hívd meg a renderelő függvényt

]]>
      </content>
    </item>

    <item>
      <title>Ezzel megvalósítottuk az alkalmazást!</title>
      <focus>1:12</focus>
      <label>Kész</label>
    </item>

  </body>

</root>