<?xml version = "1.0"?>
<root>
  <meta>
    <type>codeSurfer</type>
  </meta>

  <body>
    <item>
      <label>Bevezető</label>
      
      <showNumbers>1</showNumbers>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

/*
  1. Oldalletöltéskor kérdezd le az elemeket a fetch function-nel

  2. A pages state változó alá kösd be értékként a következőképp csoportosított elemeket:

        pages = [
          [{...}, {...}, {...}, {...} további 26 elem...], ⭠ első oldal
          [{...}, {...}, {...}, {...} további 26 elem...],
          [{...}, {...}, {...}, {...} további 26 elem...],
          [{...}, {...}, {...}, {...} további 26 elem...],
          ...
        ]
              ⭡
        oldalak tömbje

  3. Készíts renderelő függvényt, ami a selectedPageIndex-edik elemet kiszedi a pages 
     tömbből és az abban lévő képviselőket megjeleníti.

  4. Generáld ki a gombokat

  5. Gombnyomáskor állítsd át a selectedPageIndex értékét és rendereld újra a felületet
*/
]]>
      </content>
    </item>

    <item>
      <title>Sok sikert a megvalósításhoz!</title>
    </item>

    <item>
      <title>A megvalósítás első lépése az, hogy window onload eseményre futtatunk funkcionalitást.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  
}
]]>
      </content>
    </item>

    <item>

      <title>Itt AJAX kéréssel hozzájuthatunk a képviselők listájához, kiparse-olhatjuk a JSON tartalmat és kilogolhatjuk a végeredményt.</title>
      <label>1. Fetch</label>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      console.log(members);
    })
    .catch(console.log);
}
]]>
      </content>
    </item>

    <item>

      <title>Ezután kiszámolhatjuk, hogy hány oldalra van szükség. A számítást úgy lehet elvégezni, hogy elosztjuk az összes képviselő számát, az oldalanként megjelenítendő számmal, majd a végeredményt felfelé kerekítjük.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      const numberOfPages = Math.ceil(members.length / 30);
      console.log(numberOfPages);
    })
    .catch(console.log);
}
]]>
      </content>
    </item>

    <item>
      <label>2. Csoportosítás</label>
      
      <title>A kapott értéket felhasználhatjuk egy for ciklushoz és így annyi iterációt hajthatunk végre, amennyi oldal lesz.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        
      }
    })
    .catch(console.log);
}
]]>
      </content>
    </item>

    <item>
      <title>Minden egyes iterációban kiszedhetjük a members tömb 0-tól 30-adik elemeit és berakhatjuk az üresen inicializált "result" tömbbe.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      console.log(result)
    })
    .catch(console.log);
}
]]>
      </content>
    </item>

    <item>
      <title>
        Ha most futtatod az alkalmazást, azt kell látnod, hogy kilogolódnak a csoportosított elemek.
      </title>
    </item>

    <item>
      <title>A kapott végeredményt beírhatjuk a "pages" state változóba.</title>
      <fileName>script.js</fileName>
      <focus>2,16</focus>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
    })
    .catch(console.log);
}
]]>
      </content>
    </item>

    <item>
      <title>A következő lépés az oldalak és a gombsor kirajzolása. Ehhez készíthetünk egy render function-t.</title>
      <label>3. A renderelő függvény</label>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  
}
]]>
      </content>
    </item>

    <item>
      <title>A renderelés során az "app-container" id-jú element innerHTML kulcsa alá írunk be értéket.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <ul class="list-group">
        
    </ul>
  `;
}
]]>
      </content>
    </item>

    <item>
      <title>A képviselők listáját kigenerálhatjuk úgy, hogy kikérjük a pages tömbből a selectedPageIndex-edik index-et és az így kapott tömb minden elemét leképezzük olyan template darabokra, amelyekbe dinamikus adatot írunk. Ezután a join függvénnyel összefűzhetjük a template darabokat, egyetlen stringgé.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;
}
]]>
      </content>
    </item>

    <item>
      <title>Ezzel elértük, hogy megjelenjen az első oldal. Most készítsük el a gombsort!</title>
    </item>

    <item>
      <title>A gombsorhoz először kigenerálhatunk statikus elmenteket, amelyekbe be lesz ágyazva a dinamikus tartalom.</title>
      <label>4. Gombsor kigenerálása</label>
      
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
           
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;
}
]]>
      </content>
    </item>

    <item>
      <title>
        A dinamikus tartalmat a pages tömbből állíthatjuk elő, úgy hogy az összes elemét átalakítjuk egy lista elemmé, valamint az adott indexet megnöveljük eggyel és beírjük text tartalomnak.
      </title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
            ${pages.map((page, index) => `
                  <li
                    style="cursor: pointer"
                  >
                        ${index + 1}
                  </li>`
              )
              .join("")}
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;
}
]]>
      </content>
    </item>

    <item>
      <title>Emellett az index-et data attribútumnak is beírhatjuk. Ennek majd később lesz jelentősége.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
            ${pages.map((page, index) => `
                  <li
                    style="cursor: pointer"
                  >
                    <span class="page-link" data-page="${index}">
                        ${index + 1}
                    </span>
                  </li>`
              )
              .join("")}
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;
}
]]>
      </content>
    </item>

    <item>
      <title>A class attribútumok közé dinamikusan beírhatjuk az "active" értéket, amennyiben a selectedPageIndex megegyezik az éppen soronkövetkező oldal indexével.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
            ${pages.map((page, index) => `
                  <li
                    style="cursor: pointer"
                    class="page-item ${index === selectedPageIndex ? "active" : ""}"
                  >
                    <span class="page-link" data-page="${index}">
                        ${index + 1}
                    </span>
                  </li>`
              )
              .join("")}
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;
}
]]>
      </content>
    </item>

    <item>
      <title>Most érjük el azt, hogy gombra kattintáskor megtörténjen a lapozás!</title>
      <focus>21:46</focus>
      <fileName>script.js</fileName>
    </item>

    <item>
      <title>Ehhez kiselectelhetjük az összes "page-link" class-ú elementet,</title>
      <label>5. Lapozható oldalak</label> 
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
            ${pages.map((page, index) => `
                  <li
                    style="cursor: pointer"
                    class="page-item ${index === selectedPageIndex ? "active" : ""}"
                  >
                    <span class="page-link" data-page="${index}">
                        ${index + 1}
                    </span>
                  </li>`
              )
              .join("")}
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;

  document.querySelectorAll(".page-link")
}
]]>
      </content>
    </item>

    <item>
      <title>Átiterálhatunk rajtuk,</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
            ${pages.map((page, index) => `
                  <li
                    style="cursor: pointer"
                    class="page-item ${index === selectedPageIndex ? "active" : ""}"
                  >
                    <span class="page-link" data-page="${index}">
                        ${index + 1}
                    </span>
                  </li>`
              )
              .join("")}
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;

  document.querySelectorAll(".page-link")
    .forEach((element) => {

    });
}
]]>
      </content>
    </item>

    <item>
      <title>Majd minden soron következő gombra ráköthetünk egy onclick eseménykezelőt.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
            ${pages.map((page, index) => `
                  <li
                    style="cursor: pointer"
                    class="page-item ${index === selectedPageIndex ? "active" : ""}"
                  >
                    <span class="page-link" data-page="${index}">
                        ${index + 1}
                    </span>
                  </li>`
              )
              .join("")}
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;

  document.querySelectorAll(".page-link")
    .forEach((element) => {
      element.onclick = function (event) {

      };
    });
}
]]>
      </content>
    </item>

    <item>
      <title>Itt kiszedhetjük az event object-en keresztül, az adott gomb indexét.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
            ${pages.map((page, index) => `
                  <li
                    style="cursor: pointer"
                    class="page-item ${index === selectedPageIndex ? "active" : ""}"
                  >
                    <span class="page-link" data-page="${index}">
                        ${index + 1}
                    </span>
                  </li>`
              )
              .join("")}
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;

  document.querySelectorAll(".page-link")
    .forEach((element) => {
      element.onclick = function (event) {
        selectedPageIndex = Number(event.target.dataset.page);

      };
    });
}
]]>
      </content>
    </item>

    <item>
      <title>Emiatt kellett bekötni a data attribútumot, hogy kattintás eseménykor könnyen a kezünkbe kerülhessen azon oldal index-e, amit a felhasználó kiválasztott.</title>
      <focus>31[44:64],49[36:60]</focus>
    </item>
    <item>
      <title>A kezünkbe kerülő értéket átalakíthatjuk számmá és beírhatjuk a selectedPageIndex state-be.</title>
      <focus>49[9:26]</focus>
    </item>

    <item>
      <title>A state módosítás után újrarenderelhetjük a felületet.</title>
      <fileName>script.js</fileName>
      <content>
        <![CDATA[
// State
let pages = [];
let selectedPageIndex = 0;

window.addEventListener("load", windowLoaded);

function windowLoaded() {
  fetch("https://kodbazis.hu/api/members")
    .then((res) => res.json())
    .then((members) => {
      let result = [];
      const numberOfPages = Math.ceil(members.length / 30);
      for (let i = 0; i < numberOfPages; i++) {
        result.push(members.splice(0, 30));
      }
      pages = result;
      render();
    })
    .catch(console.log);
}

function render() {
  document.getElementById("app-container").innerHTML = `
    <nav class="mb-2">
        <ul class="pagination" style="flex-wrap: wrap; justify-content: center;">
            ${pages.map((page, index) => `
                  <li
                    style="cursor: pointer"
                    class="page-item ${index === selectedPageIndex ? "active" : ""}"
                  >
                    <span class="page-link" data-page="${index}">
                        ${index + 1}
                    </span>
                  </li>`
              )
              .join("")}
        </ul>
    </nav>
    <ul class="list-group">
        ${pages[selectedPageIndex]
          .map((member) => `<li class="list-group-item">${member.ParliamentaryName}</li>`)
          .join("")}
    </ul>
  `;

  document.querySelectorAll(".page-link")
    .forEach((element) => {
      element.onclick = function (event) {
        selectedPageIndex = Number(event.target.dataset.page);
        render();
      };
    });
}
]]>
      </content>
    </item>

    <item>
      <label>Kész</label>
      
      <title>Ezzel elkészültünk!</title>
      <focus>46:54</focus>
    </item>

  </body>

</root>