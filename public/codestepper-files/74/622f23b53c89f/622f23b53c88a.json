{"id":"622f23b53c88a","type":"codeSurfer","steps":[{"fileName":".htaccess","showNumbers":true,"title":"","focus":"","label":"","content":"SetEnv SZAMLAAGENT_API_KEY z5tdb64vsdfkmkm6m9m254v4k4tzjiw7g\nSetEnv SZAMLAAGENT_LOG_EMAIL shop@website.hu\nSetEnv SZAMLAAGENT_RECEIPT_PREFIX NYGTA"},{"fileName":"Invoice.php","showNumbers":true,"title":"","focus":"7","label":"","content":"<?php\n\nnamespace Kodbazis;\n\nclass Invoice\n{\n    public static function sendInvoice($name, $taxNumber, $zip, $city, $address, $email, $productName, $price)\n    {\n        require_once('szamlaagent\/examples\/autoload.php');\n\n        try {\n            \/**\n             * Számla Agent létrehozása alapértelmezett adatokkal\n             *\n             * A számla sikeres kiállítása esetén a válasz (response) tartalmazni fogja\n             * a létrejött bizonylatot PDF formátumban (1 példányban)\n             *\/\n            $agent = \\SzamlaAgent\\SzamlaAgentAPI::create($_SERVER['SZAMLAAGENT_API_KEY']);\n            $agent->setLogEmail($_SERVER['SZAMLAAGENT_LOG_EMAIL']);\n\n            \/**\n             * Új elektronikus számla létrehozása\n             *\n             * Átutalással fizetendő magyar nyelvű (Ft) számla kiállítása mai keltezési és\n             * teljesítési dátummal, +8 nap fizetési határidővel, üres számlaelőtaggal.\n             *\/\n            $invoice = new \\SzamlaAgent\\Document\\Invoice\\Invoice(\\SzamlaAgent\\Document\\Invoice\\Invoice::INVOICE_TYPE_E_INVOICE);\n\n            $header = $invoice->getHeader();\n            \/\/ Számla fizetési módja (bankkártya)\n            $header->setPaymentMethod(\\SzamlaAgent\\Document\\Invoice\\Invoice::PAYMENT_METHOD_BANKCARD);\n\n            $header->setPaid(true);\n            \/\/ Számla teljesítés dátuma\n            $header->setFulfillment(date('Y-m-d'));\n            \/\/ Számla fizetési határideje\n            $header->setPaymentDue(date('Y-m-d'));\n\n            \/\/ Vevő adatainak hozzáadása (kötelezően kitöltendő adatokkal)\n            $buyer = new \\SzamlaAgent\\Buyer($name, (string)$zip, $city, $address);\n            $buyer->setTaxNumber($taxNumber);\n            $buyer->setEmail($email);\n            $buyer->setSendEmail(true);\n            $invoice->setBuyer($buyer);\n\n\n\n            \/\/ Eladó létrehozása\n            $seller = new \\SzamlaAgent\\Seller();\n            $seller->setEmailSubject('Kódbázis számla');\n            $seller->setEmailReplyTo($_SERVER['SZAMLAAGENT_LOG_EMAIL']);\n            $seller->setEmailContent('Köszönjük a vásárlást!');\n            $invoice->setSeller($seller);\n\n\n            \/\/ Számla tétel összeállítása alapértelmezett adatokkal (1 db tétel 0%-os ÁFA tartalommal, alanyi adómentes)\n            $item = new \\SzamlaAgent\\Item\\InvoiceItem($productName, $price);\n\n\n            \/\/ Tétel nettó értéke\n            $item->setNetPrice($price);\n\n            \/\/ Tétel ÁFA értéke\n            $item->setVatAmount(0);\n            $item->setVat('AAM');\n\n            \/\/ Tétel bruttó értéke\n            $item->setGrossAmount($price);\n\n\n\n\n\n\n            \/\/ Tétel hozzáadása a számlához\n            $invoice->addItem($item);\n\n\n            \/\/ Számla elkészítése\n            $result = $agent->generateInvoice($invoice);\n            \/\/ Agent válasz sikerességének ellenőrzése\n            if ($result->isSuccess()) {\n                return true;\n            }\n        } catch (\\Exception $e) {\n            $agent->logError($e->getMessage());\n            var_dump($e);\n        }\n    }\n\n    public static function sendReceipt($email, $productName, $price)\n    {\n        require_once('szamlaagent\/examples\/autoload.php');\n        try {\n            $agent = \\SzamlaAgent\\SzamlaAgentAPI::create($_SERVER['SZAMLAAGENT_API_KEY']);\n            $agent->setLogEmail($_SERVER['SZAMLAAGENT_LOG_EMAIL']);\n\n            $receipt = new \\SzamlaAgent\\Document\\Receipt\\Receipt();\n\n            $header = new \\SzamlaAgent\\Header\\ReceiptHeader();\n            $header->setPaymentMethod('bankcard');\n\n            $receipt->setHeader($header);\n            \/\/ Nyugta előtag beállítása\n            $receipt->getHeader()->setPrefix($_SERVER['SZAMLAAGENT_RECEIPT_PREFIX']);\n            \/\/ Nyugta tétel összeállítása (1 db eladó tétel 27%-os ÁFA tartalommal)\n            $item = new \\SzamlaAgent\\Item\\ReceiptItem($productName, $price);\n\n\n            \/\/ Tétel nettó értéke\n            $item->setNetPrice($price);\n\n            \/\/ Tétel ÁFA értéke\n            $item->setVatAmount(0);\n            $item->setVat('AAM');\n\n            \/\/ Tétel bruttó értéke\n            $item->setGrossAmount($price);\n\n            \/\/ Tétel hozzáadása a nyugtához\n            $receipt->addItem($item);\n\n            \/\/ Nyugta elküldése\n            $result = $agent->generateReceipt($receipt);\n\n            \/\/ Agent válasz sikerességének ellenőrzése\n            if ($result->isSuccess()) {\n                $receipt = new \\SzamlaAgent\\Document\\Receipt\\Receipt($result->getDocumentNumber());\n                \/\/ Vevő létrehozása\n                $buyer = new \\SzamlaAgent\\Buyer();\n                \/\/ Vevő e-mail címe (ide megy ki a levél)\n                $buyer->setEmail($email);\n                \/\/ Vevői adatok hozzáadása a nyugtához\n                $receipt->setBuyer($buyer);\n\n                \/\/ Eladó e-mail értesítő beállítása\n                $seller = new \\SzamlaAgent\\Seller();\n                \/\/ Ha a vevő válaszol, erre a címre érkezik be a válasz\n                $seller->setEmailReplyTo($_SERVER['SZAMLAAGENT_LOG_EMAIL']);\n                $seller->setEmailSubject('Kódbázis nyugta');\n\n                $seller->setEmailContent('Köszönjük a vásárlást!');\n                \/\/ Eladói adatok hozzáadása a nyugtához\n                $receipt->setSeller($seller);\n\n                $agent->sendReceipt($receipt);\n            }\n        } catch (\\Exception $e) {\n            $agent->logError($e->getMessage());\n        }\n    }\n}\n"},{"fileName":"Invoice.php","showNumbers":true,"title":"","focus":"29","label":"","content":"<?php\n\n\/**\n *  Copyright (C) 2020 OTP Mobil Kft.\n *\n *  PHP version 7\n *\n *  This program is free software: you can redistribute it and\/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n *\n * @category  SDK\n * @package   SimplePayV2_SDK\n * @author    SimplePay IT Support <itsupport@otpmobil.com>\n * @copyright 2020 OTP Mobil Kft.\n * @license   http:\/\/www.gnu.org\/licenses\/gpl-3.0.html  GNU GENERAL PUBLIC LICENSE (GPL V3.0)\n * @link      http:\/\/simplepartner.hu\/online_fizetesi_szolgaltatas.html\n *\/\n\nfunction ipn()\n{\n    \/\/header('Content-Type: text\/html; charset=utf-8');\n    header('Content-Type: application\/json; charset=utf-8');\n\n    \/\/Optional error riporting\n    error_reporting(E_ALL);\n    ini_set('display_errors', '1');\n\n    \/\/Import config data\n    require_once 'src\/config.php';\n\n    \/\/Import SimplePayment class\n    require_once 'src\/SimplePayV21.php';\n\n    $json = file_get_contents('php:\/\/input');\n\n    $input = (array) json_decode($json);\n\n    if($input['status'] === \"TIMEOUT\") {\n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"UPDATE `orders` SET `status` = 'TIMEOUT' WHERE `orders`.`ref` = ?;\");\n        $stmt->execute([$input['ref']]);\n        return;\n    }\n\n\n    $trx = new SimplePayIpn;\n\n    $trx->addConfig($config);\n\n    \/\/check signature and confirm IPN\n    \/\/-----------------------------------------------------------------------------------------\n    if ($trx->isIpnSignatureCheck($json)) {\n\n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"UPDATE `orders` SET `status` = 'FINISHED' WHERE `orders`.`ref` = ?;\");\n        $stmt->execute([$input['ref']]);\n\n        \/**\n         * Generates all response\n         * Puts signature into header\n         * Print response body\n         *\n         * Use this OR getIpnConfirmContent\n         *\/\n        $trx->runIpnConfirm();\n\n        \/**\n         * Generates all response\n         * Gets signature and response body\n         *\n         * You must set signeature in header and you must print response body!\n         *\n         * Use this OR runIpnConfirm()\n         *\/\n        \/\/$confirm = $trx->getIpnConfirmContent();\n\n        \/\/ Számlázás\n        \/\/ Értesítő email ...\n    }\n\n    \/\/no need to print further information\n    exit;\n}\n"},{"fileName":"Invoice.php","showNumbers":true,"title":"","focus":"88","label":"","content":""},{"fileName":"Invoice.php","showNumbers":true,"title":"","focus":"","label":"","content":"<?php\n\n\/**\n *  Copyright (C) 2020 OTP Mobil Kft.\n *\n *  PHP version 7\n *\n *  This program is free software: you can redistribute it and\/or modify\n *   it under the terms of the GNU General Public License as published by\n *   the Free Software Foundation, either version 3 of the License, or\n *   (at your option) any later version.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n *\n * @category  SDK\n * @package   SimplePayV2_SDK\n * @author    SimplePay IT Support <itsupport@otpmobil.com>\n * @copyright 2020 OTP Mobil Kft.\n * @license   http:\/\/www.gnu.org\/licenses\/gpl-3.0.html  GNU GENERAL PUBLIC LICENSE (GPL V3.0)\n * @link      http:\/\/simplepartner.hu\/online_fizetesi_szolgaltatas.html\n *\/\n\nfunction ipn()\n{\n    \/\/header('Content-Type: text\/html; charset=utf-8');\n    header('Content-Type: application\/json; charset=utf-8');\n\n    \/\/Optional error riporting\n    error_reporting(E_ALL);\n    ini_set('display_errors', '1');\n\n    \/\/Import config data\n    require_once 'src\/config.php';\n\n    \/\/Import SimplePayment class\n    require_once 'src\/SimplePayV21.php';\n\n    $json = file_get_contents('php:\/\/input');\n\n    $input = (array) json_decode($json);\n\n    if($input['status'] === \"TIMEOUT\") {\n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"UPDATE `orders` SET `status` = 'TIMEOUT' WHERE `orders`.`ref` = ?;\");\n        $stmt->execute([$input['ref']]);\n        return;\n    }\n\n\n    $trx = new SimplePayIpn;\n\n    $trx->addConfig($config);\n\n    \/\/check signature and confirm IPN\n    \/\/-----------------------------------------------------------------------------------------\n    if ($trx->isIpnSignatureCheck($json)) {\n\n        $pdo = getConnection();\n        $stmt = $pdo->prepare(\"UPDATE `orders` SET `status` = 'FINISHED' WHERE `orders`.`ref` = ?;\");\n        $stmt->execute([$input['ref']]);\n\n        \/**\n         * Generates all response\n         * Puts signature into header\n         * Print response body\n         *\n         * Use this OR getIpnConfirmContent\n         *\/\n        $trx->runIpnConfirm();\n\n        \/**\n         * Generates all response\n         * Gets signature and response body\n         *\n         * You must set signeature in header and you must print response body!\n         *\n         * Use this OR runIpnConfirm()\n         *\/\n        \/\/$confirm = $trx->getIpnConfirmContent();\n\n        \/\/ Számlázás\n        Invoice::sendInvoice(\"Kovács József\", \"Adószám\", \"1234\", \"Budapest\", \"Termék neve\", 19990);\n    }\n\n    \/\/no need to print further information\n    exit;\n}\n"}]}